<?php
 
/**
 * Implements hook_entity_load().
 */
function lazy_panelizer_entity_load(&$entities, $entity_type) {
  $handler = panelizer_entity_plugin_get_handler($entity_type);
  if ($handler) {
    foreach ($entities as $entity_id => $entity) {
      list(, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
      if ($handler->is_panelized($bundle)) {
        $entity->panelizer = new LazyPanelizerArrayObject();
        $entity->panelizer->setEntity($entity, $entity_type, $entity_id, $revision_id);
      }
      else {
        $entity->panelizer = array();
      }
    }
  }
}

/**
 * Implements hook_entity_presave()
 * When saving an entity make sure we use the default panelizer object
 */
function lazy_panelizer_entity_presave($entity, $entity_type) {
  if ($entity_type == 'node' && isset($entity->revision)) {
    $handler = panelizer_entity_plugin_get_handler($entity_type);
    if ($handler) {
      unset($entity->panelizer);
      list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
      $entities = array($entity_id => $entity);
      panelizer_entity_load($entities, $entity_type);
    }
  }
  elseif ($entity_type == 'user') {
    unset($entity->panelizer);
    list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
    $entities = array($entity_id => $entity);
    panelizer_entity_load($entities, $entity_type);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function lazy_panelizer_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_load') {
    unset($implementations['panelizer']);
  }
}

/**
 * Proxy object class.
 */
class LazyPanelizerArrayObject extends ArrayObject {

  private $entity = NULL;
  private $entityType = NULL;
  private $entityId = NULL;
  public $did = NULL;
  public $revision_id = NULL;
  private $panelizer = NULL;

  public function setEntity($entity, $entity_type, $entity_id, $revision_id) {
    $this->entity = $entity;
    $this->entityType = $entity_type;
    $this->entityId = $entity_id;
    $this->revision_id = $revision_id;
  }

  private function &getPanelizer() {
    if (!is_null($this->panelizer)) {
      return $this->panelizer;
    }

    unset($this->entity->panelizer);
    $entities = array($this->entityId => $this->entity);
    panelizer_entity_load($entities, $this->entityType);

    if (isset($this->entity->panelizer)) {
      $this->panelizer = &$this->entity->panelizer;
    }
    else {
      $this->panelizer = array();
    }

    return $this->panelizer;
  }

  public function append($value) {
    $p = &$this->getPanelizer();
    $p[] = $value;
  }

  public function count() {
    $p = &$this->getPanelizer();
    return count($p);
  }

  public function offsetExists($index) {
    $p = &$this->getPanelizer();
    return isset($p[$index]);
  }

  public function offsetGet($index) {
    $p = &$this->getPanelizer();
    return isset($p[$index]) ? $p[$index] : NULL;
  }

  public function offsetSet($index, $newval) {
    $p = &$this->getPanelizer();
    $p[$index] = $newval;
  }

  public function offsetUnset($index) {
    $p = &$this->getPanelizer();
    unset($p[$index]);
  }

}

